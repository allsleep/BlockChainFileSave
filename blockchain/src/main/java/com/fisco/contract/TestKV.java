package com.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.Bool;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestKV extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e00000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600783620002a3565b91507f66696c655f6964000000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217600883620002a3565b91507f66696c655f6d64350000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b81620001c6565b90508181036040830152620002908162000208565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b610b4f806200032f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063693ec85e1461003b578063e942b5161461006c575b600080fd5b61005560048036038101906100509190610699565b61009c565b6040516100639291906108cd565b60405180910390f35b610086600480360381019061008191906106da565b6101d1565b60405161009391906108fd565b60405180910390f35b6000606060008090506100ad6103dd565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e10510b6040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e0000000000000000000000000000815250876040518363ffffffff1660e01b815260040161013e929190610918565b60006040518083038186803b15801561015657600080fd5b505afa15801561016a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610193919061061c565b8092508193505050606082156101c35781600001516000815181106101b457fe5b60200260200101516020015190505b828194509450505050915091565b60006101db6103f0565b60405180604001604052806040518060400160405280600881526020017f66696c655f6d643500000000000000000000000000000000000000000000000081525081526020018481525090506060600167ffffffffffffffff8111801561024157600080fd5b5060405190808252806020026020018201604052801561027b57816020015b6102686103f0565b8152602001906001900390816102605790505b509050818160008151811061028c57fe5b602002602001018190525061029f6103dd565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663649a84286040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e000000000000000000000000000081525089856040518463ffffffff1660e01b81526004016103459392919061094f565b602060405180830381600087803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190610670565b90507f0cf385eb927670d0229706269f568122463b7535b52bd98e52d4787771855d0d816040516103c891906108fd565b60405180910390a18094505050505092915050565b6040518060200160405280606081525090565b604051806040016040528060608152602001606081525090565b600082601f83011261041b57600080fd5b815161042e610429826109c8565b61099b565b9150818183526020840193506020810190508360005b83811015610474578151860161045a88826105a0565b845260208401935060208301925050600181019050610444565b5050505092915050565b60008151905061048d81610aeb565b92915050565b6000815190506104a281610b02565b92915050565b600082601f8301126104b957600080fd5b81356104cc6104c7826109f0565b61099b565b915080825260208301602083018583830111156104e857600080fd5b6104f3838284610a98565b50505092915050565b600082601f83011261050d57600080fd5b815161052061051b826109f0565b61099b565b9150808252602083016020830185838301111561053c57600080fd5b610547838284610aa7565b50505092915050565b60006020828403121561056257600080fd5b61056c602061099b565b9050600082015167ffffffffffffffff81111561058857600080fd5b6105948482850161040a565b60008301525092915050565b6000604082840312156105b257600080fd5b6105bc604061099b565b9050600082015167ffffffffffffffff8111156105d857600080fd5b6105e4848285016104fc565b600083015250602082015167ffffffffffffffff81111561060457600080fd5b610610848285016104fc565b60208301525092915050565b6000806040838503121561062f57600080fd5b600061063d8582860161047e565b925050602083015167ffffffffffffffff81111561065a57600080fd5b61066685828601610550565b9150509250929050565b60006020828403121561068257600080fd5b600061069084828501610493565b91505092915050565b6000602082840312156106ab57600080fd5b600082013567ffffffffffffffff8111156106c557600080fd5b6106d1848285016104a8565b91505092915050565b600080604083850312156106ed57600080fd5b600083013567ffffffffffffffff81111561070757600080fd5b610713858286016104a8565b925050602083013567ffffffffffffffff81111561073057600080fd5b61073c858286016104a8565b9150509250929050565b60006107528383610889565b905092915050565b600061076582610a2c565b61076f8185610a4f565b93508360208202850161078185610a1c565b8060005b858110156107bd578484038952815161079e8582610746565b94506107a983610a42565b925060208a01995050600181019050610785565b50829750879550505050505092915050565b6107d881610a82565b82525050565b6107e781610a8e565b82525050565b60006107f882610a37565b6108028185610a60565b9350610812818560208601610aa7565b61081b81610ada565b840191505092915050565b600061083182610a37565b61083b8185610a71565b935061084b818560208601610aa7565b61085481610ada565b840191505092915050565b6000602083016000830151848203600086015261087c828261075a565b9150508091505092915050565b600060408301600083015184820360008601526108a682826107ed565b915050602083015184820360208601526108c082826107ed565b9150508091505092915050565b60006040820190506108e260008301856107cf565b81810360208301526108f48184610826565b90509392505050565b600060208201905061091260008301846107de565b92915050565b600060408201905081810360008301526109328185610826565b905081810360208301526109468184610826565b90509392505050565b600060608201905081810360008301526109698186610826565b9050818103602083015261097d8185610826565b90508181036040830152610991818461085f565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156109be57600080fd5b8060405250919050565b600067ffffffffffffffff8211156109df57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610a0757600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610ac5578082015181840152602081019050610aaa565b83811115610ad4576000848401525b50505050565b6000601f19601f8301169050919050565b610af481610a82565b8114610aff57600080fd5b50565b610b0b81610a8e565b8114610b1657600080fd5b5056fea264697066735822122068f93e1f68885b9208c6ca4ccfc25711e4ba50a4394fe1c2f6fb722534c8d8f264736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110096000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e00000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600883620002a3565b91507f66696c655f6d64350000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217600783620002a3565b91507f66696c655f6964000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b8162000208565b905081810360408301526200029081620001c6565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b610b4f806200032f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631a391cb41461003b5780637b1b8e031461006b575b600080fd5b610055600480360381019061005091906106da565b61009c565b60405161006291906108fd565b60405180910390f35b61008560048036038101906100809190610699565b6102a8565b6040516100939291906108cd565b60405180910390f35b60006100a66103dd565b60405180604001604052806040518060400160405280600881526020017f66696c655f6d643500000000000000000000000000000000000000000000000081525081526020018481525090506060600167ffffffffffffffff8111801561010c57600080fd5b5060405190808252806020026020018201604052801561014657816020015b6101336103dd565b81526020019060019003908161012b5790505b509050818160008151811061015757fe5b602002602001018190525061016a6103f7565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af5081746040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e000000000000000000000000000081525089856040518463ffffffff1660e01b81526004016102109392919061094f565b602060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610670565b90507fc044934b9c0dc8f2e96c0797246bde787cfafd3e8474b4ac3271c1d3ac7b819a8160405161029391906108fd565b60405180910390a18094505050505092915050565b6000606060008090506102b96103f7565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcce55316040518060400160405280601281526020017f74625f66696c655f626c6f636b636861696e0000000000000000000000000000815250876040518363ffffffff1660e01b815260040161034a929190610918565b60006040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039f919061061c565b8092508193505050606082156103cf5781600001516000815181106103c057fe5b60200260200101516020015190505b828194509450505050915091565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b600082601f83011261041b57600080fd5b815161042e610429826109c8565b61099b565b9150818183526020840193506020810190508360005b83811015610474578151860161045a88826105a0565b845260208401935060208301925050600181019050610444565b5050505092915050565b60008151905061048d81610aeb565b92915050565b6000815190506104a281610b02565b92915050565b600082601f8301126104b957600080fd5b81356104cc6104c7826109f0565b61099b565b915080825260208301602083018583830111156104e857600080fd5b6104f3838284610a98565b50505092915050565b600082601f83011261050d57600080fd5b815161052061051b826109f0565b61099b565b9150808252602083016020830185838301111561053c57600080fd5b610547838284610aa7565b50505092915050565b60006020828403121561056257600080fd5b61056c602061099b565b9050600082015167ffffffffffffffff81111561058857600080fd5b6105948482850161040a565b60008301525092915050565b6000604082840312156105b257600080fd5b6105bc604061099b565b9050600082015167ffffffffffffffff8111156105d857600080fd5b6105e4848285016104fc565b600083015250602082015167ffffffffffffffff81111561060457600080fd5b610610848285016104fc565b60208301525092915050565b6000806040838503121561062f57600080fd5b600061063d8582860161047e565b925050602083015167ffffffffffffffff81111561065a57600080fd5b61066685828601610550565b9150509250929050565b60006020828403121561068257600080fd5b600061069084828501610493565b91505092915050565b6000602082840312156106ab57600080fd5b600082013567ffffffffffffffff8111156106c557600080fd5b6106d1848285016104a8565b91505092915050565b600080604083850312156106ed57600080fd5b600083013567ffffffffffffffff81111561070757600080fd5b610713858286016104a8565b925050602083013567ffffffffffffffff81111561073057600080fd5b61073c858286016104a8565b9150509250929050565b60006107528383610889565b905092915050565b600061076582610a2c565b61076f8185610a4f565b93508360208202850161078185610a1c565b8060005b858110156107bd578484038952815161079e8582610746565b94506107a983610a42565b925060208a01995050600181019050610785565b50829750879550505050505092915050565b6107d881610a82565b82525050565b6107e781610a8e565b82525050565b60006107f882610a37565b6108028185610a60565b9350610812818560208601610aa7565b61081b81610ada565b840191505092915050565b600061083182610a37565b61083b8185610a71565b935061084b818560208601610aa7565b61085481610ada565b840191505092915050565b6000602083016000830151848203600086015261087c828261075a565b9150508091505092915050565b600060408301600083015184820360008601526108a682826107ed565b915050602083015184820360208601526108c082826107ed565b9150508091505092915050565b60006040820190506108e260008301856107cf565b81810360208301526108f48184610826565b90509392505050565b600060208201905061091260008301846107de565b92915050565b600060408201905081810360008301526109328185610826565b905081810360208301526109468184610826565b90509392505050565b600060608201905081810360008301526109698186610826565b9050818103602083015261097d8185610826565b90508181036040830152610991818461085f565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156109be57600080fd5b8060405250919050565b600067ffffffffffffffff8211156109df57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610a0757600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610ac5578082015181840152602081019050610aaa565b83811115610ad4576000848401525b50505050565b6000601f19601f8301169050919050565b610af481610a82565b8114610aff57600080fd5b50565b610b0b81610a8e565b8114610b1657600080fd5b5056fea2646970667358221220cd8c3e3f105a3aa8848784eb662e88eb57b5d3db6a193a622a643084480b18b964736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"SetEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileId\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fileMD5\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET = "get";

    public static final String FUNC_SET = "set";

    public static final Event SETEVENT_EVENT = new Event("SetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestKV(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<SetEventEventResponse> getSetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETEVENT_EVENT, transactionReceipt);
        ArrayList<SetEventEventResponse> responses = new ArrayList<SetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetEventEventResponse typedResponse = new SetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Tuple2<Boolean, String> get(String fileId) throws ContractException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new Utf8String(fileId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt set(String fileId, String fileMD5) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new Utf8String(fileId),
                new Utf8String(fileMD5)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void set(String fileId, String fileMD5, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new Utf8String(fileId),
                new Utf8String(fileMD5)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSet(String fileId, String fileMD5) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new Utf8String(fileId),
                new Utf8String(fileMD5)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getSetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TestKV load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TestKV(contractAddress, client, credential);
    }

    public static TestKV deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TestKV.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class SetEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
